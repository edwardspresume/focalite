name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Release build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
          - os: macos-latest
          # Uncomment to build Linux assets as well
          # - os: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Validate version consistency (tag/pkg/tauri/cargo)
        uses: actions/github-script@v7
        env:
          TAG: ${{ github.ref_name }}
        with:
          script: |
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const tauri = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
            const cargoToml = fs.readFileSync('src-tauri/Cargo.toml', 'utf8');
            const cargoVersion = (cargoToml.match(/^version\s*=\s*"([^"]+)"/m) || [null, null])[1];
            const tag = process.env.TAG || '';
            const tagVersion = tag.replace(/^v/, '');

            const mismatches = [];
            if (!pkg.version) mismatches.push('package.json missing version');
            if (!tauri.version) mismatches.push('tauri.conf.json missing version');
            if (!cargoVersion) mismatches.push('Cargo.toml missing version');

            if (pkg.version && tauri.version && pkg.version !== tauri.version) {
              mismatches.push(`package.json (${pkg.version}) != tauri.conf.json (${tauri.version})`);
            }
            if (pkg.version && cargoVersion && pkg.version !== cargoVersion) {
              mismatches.push(`package.json (${pkg.version}) != Cargo.toml (${cargoVersion})`);
            }
            if (tagVersion && pkg.version && tagVersion !== pkg.version) {
              mismatches.push(`git tag (${tag}) != package.json (${pkg.version})`);
            }

            if (mismatches.length) {
              core.setFailed('Version mismatch: ' + mismatches.join('; '));
            } else {
              core.info(`Version OK: ${pkg.version}`);
            }

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Enable pnpm cache
        uses: actions/setup-node@v4
        with:
          cache: 'pnpm'

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and publish release artifacts
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tauriScript: pnpm tauri
          # Attach artifacts to the tag's release
          tagName: ${{ github.ref_name }}
          releaseName: Focalite ${{ github.ref_name }}
          releaseBody: |
            Automated release for ${{ github.ref_name }}.
            - Built via GitHub Actions matrix (Windows/macOS).
            - Includes MSI/NSIS on Windows and DMG on macOS.
          draft: false
          prerelease: false
