name: Release (Windows NSIS)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Release build (Windows NSIS)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version consistency
        shell: bash
        run: |
          PKG_VER=$(node -p "require('./package.json').version")
          TAURI_VER=$(node -p "require('./src-tauri/tauri.conf.json').version")
          CARGO_VER=$(grep -m1 '^version = ' src-tauri/Cargo.toml | cut -d'"' -f2)
          TAG_VER="${GITHUB_REF_NAME#v}"

          if [[ "$PKG_VER" != "$TAURI_VER" ]] || [[ "$PKG_VER" != "$CARGO_VER" ]] || [[ "$TAG_VER" != "$PKG_VER" ]]; then
            echo "❌ Version mismatch:"
            echo "  package.json: $PKG_VER"
            echo "  tauri.conf.json: $TAURI_VER"
            echo "  Cargo.toml: $CARGO_VER"
            echo "  Git tag: $TAG_VER"
            exit 1
          fi
          echo "✅ All versions match: $PKG_VER"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js with cache
        uses: actions/setup-node@v5
        with:
          node-version: lts/*
          cache: pnpm

      - name: Install Rust with cache
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tauriScript: pnpm tauri
          tagName: ${{ github.ref_name }}
          releaseName: Focalite ${{ github.ref_name }}
          releaseBody: |
            Automated release for ${{ github.ref_name }}.
            - Windows NSIS installer (.exe)
          releaseDraft: false
          prerelease: false